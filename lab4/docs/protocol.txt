Система дистанционного тестирования
Версия: 1.1

1. Как только сервер включается, он генерирует список всех имеющихся тестов на данный момент, после чего начинает ожидать
подключение клиента.

2. На сервере хранятся тесты в виде json-файлов, в незашифрованном виде.

3. Когда клиент подключается, он присылает пакет (client_type: 0) или (client_type: 1), в котором указаны имя пользователя
и пароль в JSON-формате.

4. Если пакет (client_type: 0), то производится регистрация пользователя.
Если же указанное имя уже есть в списке сервера, то сервер отправляет клиенту пакет (server_type: 4)
с кодом ошибки 0 - "Такой пользователь уже существует.". После этого пользователь должен
инициировать повторную отправку регистрационных (или авторизационных) данных на сервер.

5. Если пакет (client_type: 1), то производится авторизация клиента.
Если логин или пароль оказались неверными, сервер отправляет клиенту пакет (server_type: 4) с кодом
ошибки 1 - "Неверное имя пользователя или пароль". После этого пользователь должен
инициировать повторную отправку авторизационных (или регистрационных) данных на сервер.

6. После успешной авторизации пользователю отправляется пакет (server_type: 0) - список тестов, как подтверждение успешной
авторизации.

7. Если клиент просит список вопросов (client_type: 2), ему посылается пакет (server_type: 0)

8. Если пользователь просит результат последнего теста (client_type: 3), сервер отправляет пакет (server_type: 2)

9. Если пользователь просит тест (client_type: 4), ему посылается пакет с первым вопросом (server_type: 1).

10. Когда пользователь отвечает на вопрос, он посылает серверу пакет (client_type: 5). После получения данного пакета,
сервер либо отправляет пакет (server_type: 1) со следующим вопросом теста, либо пакет (server_type: 2) с результатом теста,
если предыдущий вопрос был последним.

11. Если пользователь решает отключиться, он может написать команду (client_type: 6). После этого ему стоит дождаться пакета
сервера (server_type: 3), так как это безопасный способ отключения от сервера.

12. Если же клиент решает отключить клиента, он может написать команду (server_type: 3). После этого ему стоит дождаться пакета
клиента (client_type: 6), так как это безопасный способ отключения клиента.
